package sentinel

import (
	"bytes"
	"context"
	"fmt"
	"os"
	"path"

	"github.com/alauda/redis-operator/cmd/redis-tools/sync"
	"github.com/go-logr/logr"
	"github.com/urfave/cli/v2"
	"k8s.io/client-go/kubernetes"
)

const (
	REDIS_CONFIG_REWRITE_SIGNATURE = "# Generated by CONFIG REWRITE"
)

type HealOptions struct {
	Namespace  string
	PodName    string
	Workspace  string
	TargetName string
	Prefix     string
}

// MergeConfig merge sentinel local and cached config
func MergeConfig(ctx context.Context, c *cli.Context, client *kubernetes.Clientset, logger logr.Logger) error {
	localConf := c.String("local-conf-file")

	opts := &HealOptions{
		Namespace:  c.String("namespace"),
		PodName:    c.String("pod-name"),
		Workspace:  c.String("workspace"),
		TargetName: c.String("config-name"),
		Prefix:     c.String("prefix"),
	}

	var (
		err           error
		localFileData []byte
		cachedData    []byte
	)
	if localFileData, err = os.ReadFile(localConf); err != nil && !os.IsNotExist(err) {
		logger.Error(err, "read local config failed")
		return err
	}
	localFileData = append(localFileData, '\n')

	if cachedData, err = loadCachedData(ctx, client, opts); err != nil {
		logger.Error(err, "load cached config failed")
		return err
	}

	parts := bytes.SplitN(cachedData, []byte(REDIS_CONFIG_REWRITE_SIGNATURE), 2)
	if len(parts) == 2 {
		for _, line := range bytes.Split(parts[0], []byte{'\n'}) {
			if len(line) == 0 || line[0] == '#' {
				continue
			}
			if bytes.HasPrefix(line, []byte("sentinel ")) {
				localFileData = append(localFileData, line...)
				localFileData = append(localFileData, '\n')
			}
		}

		localFileData = append(localFileData, REDIS_CONFIG_REWRITE_SIGNATURE...)
		localFileData = append(localFileData, '\n')
		for _, line := range bytes.Split(parts[1], []byte{'\n'}) {
			if len(line) == 0 || line[0] == '#' ||
				bytes.Equal(line, []byte("sentinel ")) || bytes.Equal(line, []byte("sentinel")) {
				continue
			}
			if bytes.HasPrefix(line, []byte("port ")) ||
				bytes.HasPrefix(line, []byte("bind ")) ||
				bytes.HasPrefix(line, []byte("dir ")) ||
				bytes.HasPrefix(line, []byte("user")) ||
				bytes.HasPrefix(line, []byte("requirepass")) ||
				bytes.HasPrefix(line, []byte("sentinel announce-ip")) ||
				bytes.HasPrefix(line, []byte("sentinel announce-port")) ||
				bytes.HasPrefix(line, []byte("sentinel sentinel-user")) ||
				bytes.HasPrefix(line, []byte("sentinel sentinel-pass")) {
				continue
			}
			localFileData = append(localFileData, line...)
			localFileData = append(localFileData, '\n')
		}
	}

	tmpFile := path.Join(opts.Workspace, "tmp-"+opts.TargetName)
	targetFile := path.Join(opts.Workspace, opts.TargetName)
	if err := os.WriteFile(tmpFile, []byte(localFileData), 0600); err != nil {
		logger.Error(err, "update sentinel.conf failed")
		return err
	} else if err := os.Rename(tmpFile, targetFile); err != nil {
		logger.Error(err, "rename tmp-sentinel.conf to sentinel.conf failed")
		return err
	}
	return nil
}

func loadCachedData(ctx context.Context, client *kubernetes.Clientset, opts *HealOptions) ([]byte, error) {
	name := fmt.Sprintf("%s%s", opts.Prefix, opts.PodName)
	obj, err := sync.LoadPersistentObject(ctx, client, "secret", opts.Namespace, name)
	if err != nil {
		return nil, err
	}
	return obj.Get(opts.TargetName), nil
}
