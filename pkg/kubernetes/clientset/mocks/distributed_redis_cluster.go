/*
Copyright 2023 The RedisOperator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	v1alpha1 "github.com/alauda/redis-operator/api/cluster/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// DistributedRedisCluster is an autogenerated mock type for the DistributedRedisCluster type
type DistributedRedisCluster struct {
	mock.Mock
}

// GetDistributedRedisCluster provides a mock function with given fields: ctx, namespace, name
func (_m *DistributedRedisCluster) GetDistributedRedisCluster(ctx context.Context, namespace string, name string) (*v1alpha1.DistributedRedisCluster, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetDistributedRedisCluster")
	}

	var r0 *v1alpha1.DistributedRedisCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.DistributedRedisCluster, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.DistributedRedisCluster); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.DistributedRedisCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDistributedRedisCluster provides a mock function with given fields: ctx, inst
func (_m *DistributedRedisCluster) UpdateDistributedRedisCluster(ctx context.Context, inst *v1alpha1.DistributedRedisCluster) error {
	ret := _m.Called(ctx, inst)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDistributedRedisCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DistributedRedisCluster) error); ok {
		r0 = rf(ctx, inst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDistributedRedisClusterStatus provides a mock function with given fields: ctx, inst
func (_m *DistributedRedisCluster) UpdateDistributedRedisClusterStatus(ctx context.Context, inst *v1alpha1.DistributedRedisCluster) error {
	ret := _m.Called(ctx, inst)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDistributedRedisClusterStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.DistributedRedisCluster) error); ok {
		r0 = rf(ctx, inst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDistributedRedisCluster creates a new instance of DistributedRedisCluster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDistributedRedisCluster(t interface {
	mock.TestingT
	Cleanup(func())
}) *DistributedRedisCluster {
	mock := &DistributedRedisCluster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
