/*
Copyright 2023 The RedisOperator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
)

// Node is an autogenerated mock type for the Node type
type Node struct {
	mock.Mock
}

// GetNode provides a mock function with given fields: ctx, name
func (_m *Node) GetNode(ctx context.Context, name string) (*v1.Node, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 *v1.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1.Node, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.Node); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodesByLabels provides a mock function with given fields: ctx, label_map
func (_m *Node) ListNodesByLabels(ctx context.Context, label_map map[string]string) (*v1.NodeList, error) {
	ret := _m.Called(ctx, label_map)

	if len(ret) == 0 {
		panic("no return value specified for ListNodesByLabels")
	}

	var r0 *v1.NodeList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) (*v1.NodeList, error)); ok {
		return rf(ctx, label_map)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) *v1.NodeList); ok {
		r0 = rf(ctx, label_map)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.NodeList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, label_map)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNode creates a new instance of Node. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *Node {
	mock := &Node{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
