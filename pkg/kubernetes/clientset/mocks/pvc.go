/*
Copyright 2023 The RedisOperator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
)

// PVC is an autogenerated mock type for the PVC type
type PVC struct {
	mock.Mock
}

// CreatePVC provides a mock function with given fields: ctx, namespace, pvc
func (_m *PVC) CreatePVC(ctx context.Context, namespace string, pvc *v1.PersistentVolumeClaim) error {
	ret := _m.Called(ctx, namespace, pvc)

	if len(ret) == 0 {
		panic("no return value specified for CreatePVC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.PersistentVolumeClaim) error); ok {
		r0 = rf(ctx, namespace, pvc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPVC provides a mock function with given fields: ctx, namespace, name
func (_m *PVC) GetPVC(ctx context.Context, namespace string, name string) (*v1.PersistentVolumeClaim, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetPVC")
	}

	var r0 *v1.PersistentVolumeClaim
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.PersistentVolumeClaim, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.PersistentVolumeClaim); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PersistentVolumeClaim)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPvcByLabel provides a mock function with given fields: ctx, namespace, label_map
func (_m *PVC) ListPvcByLabel(ctx context.Context, namespace string, label_map map[string]string) (*v1.PersistentVolumeClaimList, error) {
	ret := _m.Called(ctx, namespace, label_map)

	if len(ret) == 0 {
		panic("no return value specified for ListPvcByLabel")
	}

	var r0 *v1.PersistentVolumeClaimList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) (*v1.PersistentVolumeClaimList, error)); ok {
		return rf(ctx, namespace, label_map)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) *v1.PersistentVolumeClaimList); ok {
		r0 = rf(ctx, namespace, label_map)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PersistentVolumeClaimList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, namespace, label_map)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPVC creates a new instance of PVC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPVC(t interface {
	mock.TestingT
	Cleanup(func())
}) *PVC {
	mock := &PVC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
