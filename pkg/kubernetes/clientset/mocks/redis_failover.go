/*
Copyright 2023 The RedisOperator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	client "sigs.k8s.io/controller-runtime/pkg/client"

	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/alauda/redis-operator/api/databases/v1"
)

// RedisFailover is an autogenerated mock type for the RedisFailover type
type RedisFailover struct {
	mock.Mock
}

// GetRedisFailover provides a mock function with given fields: ctx, namespace, name
func (_m *RedisFailover) GetRedisFailover(ctx context.Context, namespace string, name string) (*v1.RedisFailover, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRedisFailover")
	}

	var r0 *v1.RedisFailover
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.RedisFailover, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.RedisFailover); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RedisFailover)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRedisFailovers provides a mock function with given fields: ctx, namespace, opts
func (_m *RedisFailover) ListRedisFailovers(ctx context.Context, namespace string, opts client.ListOptions) (*v1.RedisFailoverList, error) {
	ret := _m.Called(ctx, namespace, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListRedisFailovers")
	}

	var r0 *v1.RedisFailoverList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ListOptions) (*v1.RedisFailoverList, error)); ok {
		return rf(ctx, namespace, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ListOptions) *v1.RedisFailoverList); ok {
		r0 = rf(ctx, namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RedisFailoverList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.ListOptions) error); ok {
		r1 = rf(ctx, namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRedisFailover provides a mock function with given fields: ctx, inst
func (_m *RedisFailover) UpdateRedisFailover(ctx context.Context, inst *v1.RedisFailover) error {
	ret := _m.Called(ctx, inst)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRedisFailover")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RedisFailover) error); ok {
		r0 = rf(ctx, inst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRedisFailoverStatus provides a mock function with given fields: ctx, inst
func (_m *RedisFailover) UpdateRedisFailoverStatus(ctx context.Context, inst *v1.RedisFailover) error {
	ret := _m.Called(ctx, inst)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRedisFailoverStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RedisFailover) error); ok {
		r0 = rf(ctx, inst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRedisFailover creates a new instance of RedisFailover. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisFailover(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisFailover {
	mock := &RedisFailover{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
