/*
Copyright 2023 The RedisOperator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	client "sigs.k8s.io/controller-runtime/pkg/client"

	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/alauda/redis-operator/api/databases/v1"
)

// RedisSentinel is an autogenerated mock type for the RedisSentinel type
type RedisSentinel struct {
	mock.Mock
}

// GetRedisSentinel provides a mock function with given fields: ctx, namespace, name
func (_m *RedisSentinel) GetRedisSentinel(ctx context.Context, namespace string, name string) (*v1.RedisSentinel, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRedisSentinel")
	}

	var r0 *v1.RedisSentinel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.RedisSentinel, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.RedisSentinel); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RedisSentinel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRedisSentinels provides a mock function with given fields: ctx, namespace, opts
func (_m *RedisSentinel) ListRedisSentinels(ctx context.Context, namespace string, opts client.ListOptions) (*v1.RedisSentinelList, error) {
	ret := _m.Called(ctx, namespace, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListRedisSentinels")
	}

	var r0 *v1.RedisSentinelList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ListOptions) (*v1.RedisSentinelList, error)); ok {
		return rf(ctx, namespace, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ListOptions) *v1.RedisSentinelList); ok {
		r0 = rf(ctx, namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RedisSentinelList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.ListOptions) error); ok {
		r1 = rf(ctx, namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRedisSentinel provides a mock function with given fields: ctx, sen
func (_m *RedisSentinel) UpdateRedisSentinel(ctx context.Context, sen *v1.RedisSentinel) error {
	ret := _m.Called(ctx, sen)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRedisSentinel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RedisSentinel) error); ok {
		r0 = rf(ctx, sen)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRedisSentinelStatus provides a mock function with given fields: ctx, inst
func (_m *RedisSentinel) UpdateRedisSentinelStatus(ctx context.Context, inst *v1.RedisSentinel) error {
	ret := _m.Called(ctx, inst)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRedisSentinelStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RedisSentinel) error); ok {
		r0 = rf(ctx, inst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRedisSentinel creates a new instance of RedisSentinel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisSentinel(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisSentinel {
	mock := &RedisSentinel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
