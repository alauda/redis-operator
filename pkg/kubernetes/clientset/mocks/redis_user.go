/*
Copyright 2023 The RedisOperator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	client "sigs.k8s.io/controller-runtime/pkg/client"

	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/alauda/redis-operator/api/middleware/redis/v1"
)

// RedisUser is an autogenerated mock type for the RedisUser type
type RedisUser struct {
	mock.Mock
}

// CreateIfNotExistsRedisUser provides a mock function with given fields: ctx, ru
func (_m *RedisUser) CreateIfNotExistsRedisUser(ctx context.Context, ru *v1.RedisUser) error {
	ret := _m.Called(ctx, ru)

	if len(ret) == 0 {
		panic("no return value specified for CreateIfNotExistsRedisUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RedisUser) error); ok {
		r0 = rf(ctx, ru)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdateRedisUser provides a mock function with given fields: ctx, ru
func (_m *RedisUser) CreateOrUpdateRedisUser(ctx context.Context, ru *v1.RedisUser) error {
	ret := _m.Called(ctx, ru)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateRedisUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RedisUser) error); ok {
		r0 = rf(ctx, ru)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRedisUser provides a mock function with given fields: ctx, ru
func (_m *RedisUser) CreateRedisUser(ctx context.Context, ru *v1.RedisUser) error {
	ret := _m.Called(ctx, ru)

	if len(ret) == 0 {
		panic("no return value specified for CreateRedisUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RedisUser) error); ok {
		r0 = rf(ctx, ru)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRedisUser provides a mock function with given fields: ctx, namespace, name
func (_m *RedisUser) GetRedisUser(ctx context.Context, namespace string, name string) (*v1.RedisUser, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRedisUser")
	}

	var r0 *v1.RedisUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.RedisUser, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.RedisUser); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RedisUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRedisUsers provides a mock function with given fields: ctx, namespace, opts
func (_m *RedisUser) ListRedisUsers(ctx context.Context, namespace string, opts client.ListOptions) (*v1.RedisUserList, error) {
	ret := _m.Called(ctx, namespace, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListRedisUsers")
	}

	var r0 *v1.RedisUserList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ListOptions) (*v1.RedisUserList, error)); ok {
		return rf(ctx, namespace, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ListOptions) *v1.RedisUserList); ok {
		r0 = rf(ctx, namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RedisUserList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.ListOptions) error); ok {
		r1 = rf(ctx, namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRedisUser provides a mock function with given fields: ctx, ru
func (_m *RedisUser) UpdateRedisUser(ctx context.Context, ru *v1.RedisUser) error {
	ret := _m.Called(ctx, ru)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRedisUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RedisUser) error); ok {
		r0 = rf(ctx, ru)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRedisUser creates a new instance of RedisUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisUser {
	mock := &RedisUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
