/*
Copyright 2023 The RedisOperator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
)

// Secret is an autogenerated mock type for the Secret type
type Secret struct {
	mock.Mock
}

// CreateIfNotExistsSecret provides a mock function with given fields: ctx, namespace, secret
func (_m *Secret) CreateIfNotExistsSecret(ctx context.Context, namespace string, secret *v1.Secret) error {
	ret := _m.Called(ctx, namespace, secret)

	if len(ret) == 0 {
		panic("no return value specified for CreateIfNotExistsSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Secret) error); ok {
		r0 = rf(ctx, namespace, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdateSecret provides a mock function with given fields: ctx, namespace, secret
func (_m *Secret) CreateOrUpdateSecret(ctx context.Context, namespace string, secret *v1.Secret) error {
	ret := _m.Called(ctx, namespace, secret)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Secret) error); ok {
		r0 = rf(ctx, namespace, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSecret provides a mock function with given fields: ctx, namespace, secret
func (_m *Secret) CreateSecret(ctx context.Context, namespace string, secret *v1.Secret) error {
	ret := _m.Called(ctx, namespace, secret)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Secret) error); ok {
		r0 = rf(ctx, namespace, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSecret provides a mock function with given fields: ctx, namespace, name
func (_m *Secret) DeleteSecret(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSecret provides a mock function with given fields: ctx, namespace, name
func (_m *Secret) GetSecret(ctx context.Context, namespace string, name string) (*v1.Secret, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 *v1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.Secret, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.Secret); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecret provides a mock function with given fields: ctx, namespace
func (_m *Secret) ListSecret(ctx context.Context, namespace string) (*v1.SecretList, error) {
	ret := _m.Called(ctx, namespace)

	if len(ret) == 0 {
		panic("no return value specified for ListSecret")
	}

	var r0 *v1.SecretList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1.SecretList, error)); ok {
		return rf(ctx, namespace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.SecretList); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.SecretList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecret provides a mock function with given fields: ctx, namespace, secret
func (_m *Secret) UpdateSecret(ctx context.Context, namespace string, secret *v1.Secret) error {
	ret := _m.Called(ctx, namespace, secret)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Secret) error); ok {
		r0 = rf(ctx, namespace, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSecret creates a new instance of Secret. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecret(t interface {
	mock.TestingT
	Cleanup(func())
}) *Secret {
	mock := &Secret{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
